




# def gargee_function_for_making_the_crop_after_because_you_know_dude_were_making_prototypes_that_s_life(image_filename):
#     x0,y0=0,0
#     if(image_filename=='CEP_313B_2024_sl_598.tif'):
#         x0,y0=132,178

#     if(image_filename=='CEP_318_2022_sl_719.tif'):
#         x0,y0=119,152

#     if(image_filename=='CEP_322_2023_sl_781.tif'):
#         x0,y0=142,119

#     if(image_filename=='CEP_323_2024_sl_468.tif'):
#         x0,y0=141,113

#     if(image_filename=='CEP_330_2022_sl_787.tif'):
#         x0,y0=184,193

#     if(image_filename=='CEP_378A_2024_sl_1204.tif'):
#         x0,y0=110,182

#     if(image_filename=='CEP_378B_2023_sl_1234.tif'):
#         x0,y0=122,119

#     if(image_filename=='CEP_380A_2022_sl_1154.tif'):
#         x0,y0=124,142

#     if(image_filename=='CEP_764B_2022_sl_924.tif'):
#         x0,y0=137,146

#     if(image_filename=='CEP_988B_2024_sl_640.tif'):
#         x0,y0=115,175

#     if(image_filename=='CEP_1181_2024_sl_409.tif'):
#         x0,y0=108,110

#     if(image_filename=='CEP_1189_2023_sl_882.tif'):
#         x0,y0=149,147

#     if(image_filename=='CEP_1193_2022_sl_632.tif'):
#         x0,y0=96,160
#     return x0,y0





#        one_hot_masks=F.one_hot(masks_int,num_classes=6)
    
 #       print(np.shape(one_hot_masks))



#  def collect_class_labels(dataset):
#     class_labels = []
#     for _, masks in DataLoader(dataset, batch_size=1, shuffle=False):
#         masks = masks.squeeze().numpy()
#         unique_labels = np.unique(masks)
#         class_labels.extend(unique_labels)
#     return np.array(class_labels)
# class_labels = collect_class_labels(dataset)

# def calculate_class_sizes(dataset):
#     class_sizes = Counter()
#     for _, masks in DataLoader(dataset, batch_size=1, shuffle=False):
#         masks = masks.squeeze().numpy()
#         for label in np.unique(masks):
#             class_sizes[label] += np.sum(masks == label)
#     return class_sizes
# class_sizes = calculate_class_sizes(dataset)
# print("Class Sizes:", class_sizes)


# def compute_class_weights(class_sizes):
#     weights = {}
#     for class_label, size in class_sizes.items():
#         if size > 0:  # Avoid division by zero
#             weights[class_label] = 1.0 / np.sqrt(size)
#         else:
#             weights[class_label] = 1.0  # Default weight for classes with zero size
       
#     return weights
# class_weights = compute_class_weights(class_sizes)
# print("Class Weights:", class_weights)



    # hist, bin_edges = np.histogram(image, np.arange(9))
    # print("Histogram (counts):", hist)
    # print("Bins :", bin_edges)
    
    # compute_and_print_weights(masks)